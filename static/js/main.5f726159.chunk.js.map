{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","variant","component","color","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","FormControl","Input","placeholder","value","onChange","Event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gVA6BeA,G,MAxBCC,sBAAW,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,QACnBC,EAD+C,EAAnBC,WACNF,EAAQE,SACpC,OACA,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAG3C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAoB,sBAC1C,kBAACI,EAAA,EAAD,KAGI,kBAACC,EAAA,EAAD,CAAYH,UAAWF,EAAS,iBAAiB,kBAAmBM,QAAQ,KAAKC,UAAU,MACtFR,EAAQA,WAIrB,kBAACM,EAAA,EAAD,CAAYG,MAAM,gBAAgBF,QAAQ,OAEpCN,GAAD,UAAcD,EAAQE,UAAY,iB,iBCPhCQ,EAbKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,Y,yBCsDRC,MA1Df,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAImBJ,mBAAS,IAJ5B,mBAINrB,EAJM,KAII0B,EAJJ,KA+Bb,OAvBAC,qBAAU,WACRnB,EAAGoB,WAAW,YAAYC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAChEN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAGD,EAAIC,GAAIrC,QAASoC,EAAIE,iBAEhE,IAEHT,qBAAU,WAGRD,EAAYW,OAAO,wBAClB,IAcD,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,YAAYqC,IAAI,+FAC/B,+CACA,uCAAatC,GAEb,0BAAMC,UAAU,aACd,kBAACsC,EAAA,EAAD,CAAatC,UAAU,oBACrB,kBAACuC,EAAA,EAAD,CAAOvC,UAAU,aAAawC,YAAY,oBAAoBC,MAAOpB,EAAOqB,SAAU,SAAAC,GAAK,OAAIrB,EAASqB,EAAMC,OAAOH,UACrH,kBAACI,EAAA,EAAD,CAAY7C,UAAU,kBAAkB8C,UAAWzB,EAAOjB,QAAQ,YAAYE,MAAM,UAAUyC,KAAK,SAASC,QApBhG,SAACL,GAEnBA,EAAMM,iBACN1C,EAAGoB,WAAW,YAAYuB,IAAI,CAC5BrD,QAASwB,EACTtB,SAAUA,EACVoD,UAAW3C,IAASU,UAAUkC,WAAWC,oBAE3C/B,EAAS,MAaD,kBAAC,IAAD,SAKN,kBAAC,IAAD,KAEIC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIrC,EAAN,EAAMA,QAAN,OACX,kBAAC,EAAD,CAASyD,IAAKpB,EAAInC,SAAUA,EAAUF,QAASA,UC9CvC0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3E,c","file":"static/js/main.5f726159.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React, { forwardRef } from 'react'\r\nimport './Message.css'\r\n\r\n\r\nconst Message = forwardRef(({message, username}, ref) => {\r\n    const isUser = username === message.username;\r\n    return (\r\n    <div ref={ref} className={`message ${isUser && 'message__user'}`}>\r\n        {/* className={isUser ? \"message__userCard\":\"message__guestCard\" ky if eshte vendos per me diktu se a eshte tu shkrujt ni user a guest \r\n        per me dite se qfare ngjyre me pas karta e tekstit (kalter a bardhe)*/}\r\n        <Card className={isUser ? \"message__userCard\":\"message__guestCard\"}>\r\n            <CardContent>\r\n                {/* className={isUser ? \"text__userCard\":\"text__guestCard\"} ky if eshte vendos per me diktu se a eshte tu shkrujt ni user a guest \r\n                per me dite se qfare ngjyre me pas teksti (bardh a zi) */}\r\n                <Typography className={isUser ? \"text__userCard\":\"text__guestCard\"} variant='h5' component='h2'>\r\n                    {message.message}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n        <Typography color='textSecondary' variant='h6'>\r\n            {/* nese useri nuk ka shkrujt emer/username ne prompt ateher ai tjerve ka me ju dal si unknown  */}\r\n            {!isUser && `${message.username || 'Unknown'}`}\r\n        </Typography>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCrpvig-w31NsMTAWRCbXMlOoXkyO4ZEVI\",\r\n    authDomain: \"facebook-messenger-clone-a3388.firebaseapp.com\",\r\n    databaseURL: \"https://facebook-messenger-clone-a3388.firebaseio.com\",\r\n    projectId: \"facebook-messenger-clone-a3388\",\r\n    storageBucket: \"facebook-messenger-clone-a3388.appspot.com\",\r\n    messagingSenderId: \"417174498146\",\r\n    appId: \"1:417174498146:web:0373ff8e920b628aad5a3b\",\r\n    measurementId: \"G-93YPRZE1K9\"\r\n})\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import { FormControl, Input, IconButton  } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Message from './Message'\nimport db from './firebase'\nimport firebase from 'firebase'\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction App() {\n\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('')\n\n  //useEffect runs code when the page loads on a condition\n  \n  useEffect(() => {\n    db.collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id:doc.id, message: doc.data()})))\n    })\n  }, [])\n\n  useEffect(() => {\n    //kodi qe ekzekutohet\n    // nese [] eshte e thate ateher ky kod ekzekutohet veq 1 here, kur kompnenti hapet (ose bohet refresh)\n    setUsername(prompt('Enter your name: '))\n  }, []) //kushti -- dependencies(condition)\n\n  const sendMessage = (Event) => {\n    //kejt logjika per mesazhe shkruhet ktu\n    Event.preventDefault();\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput('');\n  }\n\n  return (\n    <div className=\"App\">\n      <img className='app__logo' src='https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100'></img>\n      <h1>Messenger clone</h1>\n      <h3>Welcome {username}</h3>\n\n      <form className='app__form'>\n        <FormControl className='app__formControl'>\n          <Input className='app__input' placeholder='type a message...' value={input} onChange={Event => setInput(Event.target.value)} />\n          <IconButton className='app__iconButton' disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessage}>\n            <SendIcon />\n          </IconButton>\n        </FormControl>\n      </form>\n      \n      <FlipMove>\n        {\n          messages.map(({id, message}) => (\n            <Message key={id} username={username} message={message} />\n          ))\n        }\n      </FlipMove>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}